/**
 * ****************************************************************************
 * Copyright (c) 2017 CEA LIST.
 *  *
 *  *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *  *
 * Contributors:
 * 
 * 		Mauricio Alferez (mauricio.alferez@cea.fr) CEA LIST - Initial API and implementation
 *  *
 *  ****************************************************************************
 * 
 * generated by Xtext 2.11.0
 */
package org.eclipse.papyrus.requirements.sysml14.boilerplateText.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.eclipse.papyrus.requirements.sysml14.boilerplateText.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class BoilerplateTextFactoryImpl extends EFactoryImpl implements BoilerplateTextFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static BoilerplateTextFactory init()
  {
    try
    {
      BoilerplateTextFactory theBoilerplateTextFactory = (BoilerplateTextFactory)EPackage.Registry.INSTANCE.getEFactory(BoilerplateTextPackage.eNS_URI);
      if (theBoilerplateTextFactory != null)
      {
        return theBoilerplateTextFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new BoilerplateTextFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BoilerplateTextFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case BoilerplateTextPackage.MODEL: return createModel();
      case BoilerplateTextPackage.REQUIREMENT: return createRequirement();
      case BoilerplateTextPackage.SUBJECT: return createSubject();
      case BoilerplateTextPackage.PREFIX: return createPrefix();
      case BoilerplateTextPackage.IF: return createIf();
      case BoilerplateTextPackage.WHILE: return createWhile();
      case BoilerplateTextPackage.PREDICATE: return createPredicate();
      case BoilerplateTextPackage.SHALL_NOT_ALLOW: return createShallNotAllow();
      case BoilerplateTextPackage.SHALL_ALLOW: return createShallAllow();
      case BoilerplateTextPackage.SHALL_NOT: return createShallNot();
      case BoilerplateTextPackage.SHALL: return createShall();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Requirement createRequirement()
  {
    RequirementImpl requirement = new RequirementImpl();
    return requirement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Subject createSubject()
  {
    SubjectImpl subject = new SubjectImpl();
    return subject;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Prefix createPrefix()
  {
    PrefixImpl prefix = new PrefixImpl();
    return prefix;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public If createIf()
  {
    IfImpl if_ = new IfImpl();
    return if_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public While createWhile()
  {
    WhileImpl while_ = new WhileImpl();
    return while_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Predicate createPredicate()
  {
    PredicateImpl predicate = new PredicateImpl();
    return predicate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ShallNotAllow createShallNotAllow()
  {
    ShallNotAllowImpl shallNotAllow = new ShallNotAllowImpl();
    return shallNotAllow;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ShallAllow createShallAllow()
  {
    ShallAllowImpl shallAllow = new ShallAllowImpl();
    return shallAllow;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ShallNot createShallNot()
  {
    ShallNotImpl shallNot = new ShallNotImpl();
    return shallNot;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Shall createShall()
  {
    ShallImpl shall = new ShallImpl();
    return shall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BoilerplateTextPackage getBoilerplateTextPackage()
  {
    return (BoilerplateTextPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static BoilerplateTextPackage getPackage()
  {
    return BoilerplateTextPackage.eINSTANCE;
  }

} //BoilerplateTextFactoryImpl
