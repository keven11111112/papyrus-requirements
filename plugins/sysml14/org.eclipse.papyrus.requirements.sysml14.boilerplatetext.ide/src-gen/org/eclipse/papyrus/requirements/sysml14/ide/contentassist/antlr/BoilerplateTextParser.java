/*****************************************************************************
 * Copyright (c) 2017 CEA LIST.
 *
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 * 
 * 		Mauricio Alferez (mauricio.alferez@cea.fr) CEA LIST - Initial API and implementation
 *
 *****************************************************************************/
/*
 * generated by Xtext 2.11.0
 */
package org.eclipse.papyrus.requirements.sysml14.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.papyrus.requirements.sysml14.ide.contentassist.antlr.internal.InternalBoilerplateTextParser;
import org.eclipse.papyrus.requirements.sysml14.services.BoilerplateTextGrammarAccess;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class BoilerplateTextParser extends AbstractContentAssistParser {

	@Inject
	private BoilerplateTextGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalBoilerplateTextParser createParser() {
		InternalBoilerplateTextParser result = new InternalBoilerplateTextParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getPrefixAccess().getAlternatives(), "rule__Prefix__Alternatives");
					put(grammarAccess.getPredicateAccess().getAlternatives(), "rule__Predicate__Alternatives");
					put(grammarAccess.getShallNotAllowAccess().getAlternatives_3(), "rule__ShallNotAllow__Alternatives_3");
					put(grammarAccess.getShallAllowAccess().getAlternatives_2(), "rule__ShallAllow__Alternatives_2");
					put(grammarAccess.getRequirementAccess().getGroup(), "rule__Requirement__Group__0");
					put(grammarAccess.getRequirementAccess().getGroup_0(), "rule__Requirement__Group_0__0");
					put(grammarAccess.getIfAccess().getGroup(), "rule__If__Group__0");
					put(grammarAccess.getIfAccess().getGroup_2(), "rule__If__Group_2__0");
					put(grammarAccess.getWhileAccess().getGroup(), "rule__While__Group__0");
					put(grammarAccess.getShallNotAllowAccess().getGroup(), "rule__ShallNotAllow__Group__0");
					put(grammarAccess.getShallNotAllowAccess().getGroup_3_1(), "rule__ShallNotAllow__Group_3_1__0");
					put(grammarAccess.getShallAllowAccess().getGroup(), "rule__ShallAllow__Group__0");
					put(grammarAccess.getShallAllowAccess().getGroup_2_1(), "rule__ShallAllow__Group_2_1__0");
					put(grammarAccess.getShallNotAccess().getGroup(), "rule__ShallNot__Group__0");
					put(grammarAccess.getShallNotAccess().getGroup_2(), "rule__ShallNot__Group_2__0");
					put(grammarAccess.getShallAccess().getGroup(), "rule__Shall__Group__0");
					put(grammarAccess.getShallAccess().getGroup_1(), "rule__Shall__Group_1__0");
					put(grammarAccess.getShallAccess().getGroup_1_0(), "rule__Shall__Group_1_0__0");
					put(grammarAccess.getModelAccess().getModelAssignment(), "rule__Model__ModelAssignment");
					put(grammarAccess.getRequirementAccess().getPrefixAssignment_0_0(), "rule__Requirement__PrefixAssignment_0_0");
					put(grammarAccess.getRequirementAccess().getSystemAssignment_1(), "rule__Requirement__SystemAssignment_1");
					put(grammarAccess.getRequirementAccess().getPredicateAssignment_2(), "rule__Requirement__PredicateAssignment_2");
					put(grammarAccess.getSubjectAccess().getSystemAssignment(), "rule__Subject__SystemAssignment");
					put(grammarAccess.getIfAccess().getEventAssignment_1(), "rule__If__EventAssignment_1");
					put(grammarAccess.getIfAccess().getEventAssignment_2_1(), "rule__If__EventAssignment_2_1");
					put(grammarAccess.getWhileAccess().getStateAssignment_1(), "rule__While__StateAssignment_1");
					put(grammarAccess.getShallNotAllowAccess().getActionAssignment_3_0(), "rule__ShallNotAllow__ActionAssignment_3_0");
					put(grammarAccess.getShallNotAllowAccess().getEntityAssignment_3_1_0(), "rule__ShallNotAllow__EntityAssignment_3_1_0");
					put(grammarAccess.getShallNotAllowAccess().getActionPerformedByEntityAssignment_3_1_2(), "rule__ShallNotAllow__ActionPerformedByEntityAssignment_3_1_2");
					put(grammarAccess.getShallAllowAccess().getActionAssignment_2_0(), "rule__ShallAllow__ActionAssignment_2_0");
					put(grammarAccess.getShallAllowAccess().getEntityAssignment_2_1_0(), "rule__ShallAllow__EntityAssignment_2_1_0");
					put(grammarAccess.getShallAllowAccess().getActionPerformedByEntityAssignment_2_1_2(), "rule__ShallAllow__ActionPerformedByEntityAssignment_2_1_2");
					put(grammarAccess.getShallNotAccess().getActionAssignment_3(), "rule__ShallNot__ActionAssignment_3");
					put(grammarAccess.getShallAccess().getActionAssignment_2(), "rule__Shall__ActionAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public BoilerplateTextGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(BoilerplateTextGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
