/*****************************************************************************
 * Copyright (c) 2017 CEA LIST.
 *
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 * 
 * 		Mauricio Alferez (mauricio.alferez@cea.fr) CEA LIST - Initial API and implementation
 *
 *****************************************************************************/
/*
 * generated by Xtext 2.11.0
 */
grammar InternalBoilerplateText;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
}

@lexer::header {
package org.eclipse.papyrus.requirements.sysml14.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.eclipse.papyrus.requirements.sysml14.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.eclipse.papyrus.requirements.sysml14.services.BoilerplateTextGrammarAccess;

}
@parser::members {
	private BoilerplateTextGrammarAccess grammarAccess;

	public void setGrammarAccess(BoilerplateTextGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getModelAssignment()); }
		(rule__Model__ModelAssignment)
		{ after(grammarAccess.getModelAccess().getModelAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRequirement
entryRuleRequirement
:
{ before(grammarAccess.getRequirementRule()); }
	 ruleRequirement
{ after(grammarAccess.getRequirementRule()); } 
	 EOF 
;

// Rule Requirement
ruleRequirement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRequirementAccess().getGroup()); }
		(rule__Requirement__Group__0)
		{ after(grammarAccess.getRequirementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSubject
entryRuleSubject
:
{ before(grammarAccess.getSubjectRule()); }
	 ruleSubject
{ after(grammarAccess.getSubjectRule()); } 
	 EOF 
;

// Rule Subject
ruleSubject 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSubjectAccess().getSystemAssignment()); }
		(rule__Subject__SystemAssignment)
		{ after(grammarAccess.getSubjectAccess().getSystemAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrefix
entryRulePrefix
:
{ before(grammarAccess.getPrefixRule()); }
	 rulePrefix
{ after(grammarAccess.getPrefixRule()); } 
	 EOF 
;

// Rule Prefix
rulePrefix 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrefixAccess().getAlternatives()); }
		(rule__Prefix__Alternatives)
		{ after(grammarAccess.getPrefixAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIf
entryRuleIf
:
{ before(grammarAccess.getIfRule()); }
	 ruleIf
{ after(grammarAccess.getIfRule()); } 
	 EOF 
;

// Rule If
ruleIf 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIfAccess().getGroup()); }
		(rule__If__Group__0)
		{ after(grammarAccess.getIfAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWhile
entryRuleWhile
:
{ before(grammarAccess.getWhileRule()); }
	 ruleWhile
{ after(grammarAccess.getWhileRule()); } 
	 EOF 
;

// Rule While
ruleWhile 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWhileAccess().getGroup()); }
		(rule__While__Group__0)
		{ after(grammarAccess.getWhileAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePredicate
entryRulePredicate
:
{ before(grammarAccess.getPredicateRule()); }
	 rulePredicate
{ after(grammarAccess.getPredicateRule()); } 
	 EOF 
;

// Rule Predicate
rulePredicate 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPredicateAccess().getAlternatives()); }
		(rule__Predicate__Alternatives)
		{ after(grammarAccess.getPredicateAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleShallNotAllow
entryRuleShallNotAllow
:
{ before(grammarAccess.getShallNotAllowRule()); }
	 ruleShallNotAllow
{ after(grammarAccess.getShallNotAllowRule()); } 
	 EOF 
;

// Rule ShallNotAllow
ruleShallNotAllow 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getShallNotAllowAccess().getGroup()); }
		(rule__ShallNotAllow__Group__0)
		{ after(grammarAccess.getShallNotAllowAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleShallAllow
entryRuleShallAllow
:
{ before(grammarAccess.getShallAllowRule()); }
	 ruleShallAllow
{ after(grammarAccess.getShallAllowRule()); } 
	 EOF 
;

// Rule ShallAllow
ruleShallAllow 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getShallAllowAccess().getGroup()); }
		(rule__ShallAllow__Group__0)
		{ after(grammarAccess.getShallAllowAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleShallNot
entryRuleShallNot
:
{ before(grammarAccess.getShallNotRule()); }
	 ruleShallNot
{ after(grammarAccess.getShallNotRule()); } 
	 EOF 
;

// Rule ShallNot
ruleShallNot 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getShallNotAccess().getGroup()); }
		(rule__ShallNot__Group__0)
		{ after(grammarAccess.getShallNotAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleShall
entryRuleShall
:
{ before(grammarAccess.getShallRule()); }
	 ruleShall
{ after(grammarAccess.getShallRule()); } 
	 EOF 
;

// Rule Shall
ruleShall 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getShallAccess().getGroup()); }
		(rule__Shall__Group__0)
		{ after(grammarAccess.getShallAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Prefix__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrefixAccess().getIfParserRuleCall_0()); }
		ruleIf
		{ after(grammarAccess.getPrefixAccess().getIfParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrefixAccess().getWhileParserRuleCall_1()); }
		ruleWhile
		{ after(grammarAccess.getPrefixAccess().getWhileParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Predicate__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredicateAccess().getShallParserRuleCall_0()); }
		ruleShall
		{ after(grammarAccess.getPredicateAccess().getShallParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getPredicateAccess().getShallNotParserRuleCall_1()); }
		ruleShallNot
		{ after(grammarAccess.getPredicateAccess().getShallNotParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getPredicateAccess().getShallAllowParserRuleCall_2()); }
		ruleShallAllow
		{ after(grammarAccess.getPredicateAccess().getShallAllowParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getPredicateAccess().getShallNotAllowParserRuleCall_3()); }
		ruleShallNotAllow
		{ after(grammarAccess.getPredicateAccess().getShallNotAllowParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShallNotAllow__Alternatives_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShallNotAllowAccess().getActionAssignment_3_0()); }
		(rule__ShallNotAllow__ActionAssignment_3_0)
		{ after(grammarAccess.getShallNotAllowAccess().getActionAssignment_3_0()); }
	)
	|
	(
		{ before(grammarAccess.getShallNotAllowAccess().getGroup_3_1()); }
		(rule__ShallNotAllow__Group_3_1__0)
		{ after(grammarAccess.getShallNotAllowAccess().getGroup_3_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShallAllow__Alternatives_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShallAllowAccess().getActionAssignment_2_0()); }
		(rule__ShallAllow__ActionAssignment_2_0)
		{ after(grammarAccess.getShallAllowAccess().getActionAssignment_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getShallAllowAccess().getGroup_2_1()); }
		(rule__ShallAllow__Group_2_1__0)
		{ after(grammarAccess.getShallAllowAccess().getGroup_2_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Requirement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Requirement__Group__0__Impl
	rule__Requirement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Requirement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRequirementAccess().getGroup_0()); }
	(rule__Requirement__Group_0__0)?
	{ after(grammarAccess.getRequirementAccess().getGroup_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Requirement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Requirement__Group__1__Impl
	rule__Requirement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Requirement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRequirementAccess().getSystemAssignment_1()); }
	(rule__Requirement__SystemAssignment_1)
	{ after(grammarAccess.getRequirementAccess().getSystemAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Requirement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Requirement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Requirement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRequirementAccess().getPredicateAssignment_2()); }
	(rule__Requirement__PredicateAssignment_2)
	{ after(grammarAccess.getRequirementAccess().getPredicateAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Requirement__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Requirement__Group_0__0__Impl
	rule__Requirement__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Requirement__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRequirementAccess().getPrefixAssignment_0_0()); }
	(rule__Requirement__PrefixAssignment_0_0)
	{ after(grammarAccess.getRequirementAccess().getPrefixAssignment_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Requirement__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Requirement__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Requirement__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRequirementAccess().getCommaKeyword_0_1()); }
	','
	{ after(grammarAccess.getRequirementAccess().getCommaKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__0__Impl
	rule__If__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getIfKeyword_0()); }
	'if'
	{ after(grammarAccess.getIfAccess().getIfKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__1__Impl
	rule__If__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getEventAssignment_1()); }
	(rule__If__EventAssignment_1)
	{ after(grammarAccess.getIfAccess().getEventAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getGroup_2()); }
	(rule__If__Group_2__0)*
	{ after(grammarAccess.getIfAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group_2__0__Impl
	rule__If__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getAndKeyword_2_0()); }
	'and'
	{ after(grammarAccess.getIfAccess().getAndKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getEventAssignment_2_1()); }
	(rule__If__EventAssignment_2_1)
	{ after(grammarAccess.getIfAccess().getEventAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__While__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__While__Group__0__Impl
	rule__While__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileAccess().getWhileKeyword_0()); }
	'while'
	{ after(grammarAccess.getWhileAccess().getWhileKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__While__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileAccess().getStateAssignment_1()); }
	(rule__While__StateAssignment_1)
	{ after(grammarAccess.getWhileAccess().getStateAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ShallNotAllow__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShallNotAllow__Group__0__Impl
	rule__ShallNotAllow__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ShallNotAllow__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShallNotAllowAccess().getShallKeyword_0()); }
	'shall'
	{ after(grammarAccess.getShallNotAllowAccess().getShallKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShallNotAllow__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShallNotAllow__Group__1__Impl
	rule__ShallNotAllow__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ShallNotAllow__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShallNotAllowAccess().getNotKeyword_1()); }
	('not')
	{ after(grammarAccess.getShallNotAllowAccess().getNotKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShallNotAllow__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShallNotAllow__Group__2__Impl
	rule__ShallNotAllow__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ShallNotAllow__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShallNotAllowAccess().getAllowKeyword_2()); }
	('allow')
	{ after(grammarAccess.getShallNotAllowAccess().getAllowKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShallNotAllow__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShallNotAllow__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ShallNotAllow__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShallNotAllowAccess().getAlternatives_3()); }
	(rule__ShallNotAllow__Alternatives_3)
	{ after(grammarAccess.getShallNotAllowAccess().getAlternatives_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ShallNotAllow__Group_3_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShallNotAllow__Group_3_1__0__Impl
	rule__ShallNotAllow__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ShallNotAllow__Group_3_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShallNotAllowAccess().getEntityAssignment_3_1_0()); }
	(rule__ShallNotAllow__EntityAssignment_3_1_0)
	{ after(grammarAccess.getShallNotAllowAccess().getEntityAssignment_3_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShallNotAllow__Group_3_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShallNotAllow__Group_3_1__1__Impl
	rule__ShallNotAllow__Group_3_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ShallNotAllow__Group_3_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShallNotAllowAccess().getToKeyword_3_1_1()); }
	'to'
	{ after(grammarAccess.getShallNotAllowAccess().getToKeyword_3_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShallNotAllow__Group_3_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShallNotAllow__Group_3_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ShallNotAllow__Group_3_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShallNotAllowAccess().getActionPerformedByEntityAssignment_3_1_2()); }
	(rule__ShallNotAllow__ActionPerformedByEntityAssignment_3_1_2)
	{ after(grammarAccess.getShallNotAllowAccess().getActionPerformedByEntityAssignment_3_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ShallAllow__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShallAllow__Group__0__Impl
	rule__ShallAllow__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ShallAllow__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShallAllowAccess().getShallKeyword_0()); }
	'shall'
	{ after(grammarAccess.getShallAllowAccess().getShallKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShallAllow__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShallAllow__Group__1__Impl
	rule__ShallAllow__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ShallAllow__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShallAllowAccess().getAllowKeyword_1()); }
	('allow')
	{ after(grammarAccess.getShallAllowAccess().getAllowKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShallAllow__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShallAllow__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ShallAllow__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShallAllowAccess().getAlternatives_2()); }
	(rule__ShallAllow__Alternatives_2)
	{ after(grammarAccess.getShallAllowAccess().getAlternatives_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ShallAllow__Group_2_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShallAllow__Group_2_1__0__Impl
	rule__ShallAllow__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ShallAllow__Group_2_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShallAllowAccess().getEntityAssignment_2_1_0()); }
	(rule__ShallAllow__EntityAssignment_2_1_0)
	{ after(grammarAccess.getShallAllowAccess().getEntityAssignment_2_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShallAllow__Group_2_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShallAllow__Group_2_1__1__Impl
	rule__ShallAllow__Group_2_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ShallAllow__Group_2_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShallAllowAccess().getToKeyword_2_1_1()); }
	'to'
	{ after(grammarAccess.getShallAllowAccess().getToKeyword_2_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShallAllow__Group_2_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShallAllow__Group_2_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ShallAllow__Group_2_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShallAllowAccess().getActionPerformedByEntityAssignment_2_1_2()); }
	(rule__ShallAllow__ActionPerformedByEntityAssignment_2_1_2)
	{ after(grammarAccess.getShallAllowAccess().getActionPerformedByEntityAssignment_2_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ShallNot__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShallNot__Group__0__Impl
	rule__ShallNot__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ShallNot__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShallNotAccess().getShallKeyword_0()); }
	'shall'
	{ after(grammarAccess.getShallNotAccess().getShallKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShallNot__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShallNot__Group__1__Impl
	rule__ShallNot__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ShallNot__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShallNotAccess().getNotKeyword_1()); }
	('not')
	{ after(grammarAccess.getShallNotAccess().getNotKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShallNot__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShallNot__Group__2__Impl
	rule__ShallNot__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ShallNot__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShallNotAccess().getGroup_2()); }
	(rule__ShallNot__Group_2__0)?
	{ after(grammarAccess.getShallNotAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShallNot__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShallNot__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ShallNot__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShallNotAccess().getActionAssignment_3()); }
	(rule__ShallNot__ActionAssignment_3)
	{ after(grammarAccess.getShallNotAccess().getActionAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ShallNot__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShallNot__Group_2__0__Impl
	rule__ShallNot__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ShallNot__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShallNotAccess().getBeKeyword_2_0()); }
	'be'
	{ after(grammarAccess.getShallNotAccess().getBeKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShallNot__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShallNot__Group_2__1__Impl
	rule__ShallNot__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ShallNot__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShallNotAccess().getAbleKeyword_2_1()); }
	('able')
	{ after(grammarAccess.getShallNotAccess().getAbleKeyword_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShallNot__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShallNot__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ShallNot__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShallNotAccess().getToKeyword_2_2()); }
	('to')
	{ after(grammarAccess.getShallNotAccess().getToKeyword_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Shall__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Shall__Group__0__Impl
	rule__Shall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Shall__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShallAccess().getShallKeyword_0()); }
	'shall'
	{ after(grammarAccess.getShallAccess().getShallKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Shall__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Shall__Group__1__Impl
	rule__Shall__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Shall__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShallAccess().getGroup_1()); }
	(rule__Shall__Group_1__0)?
	{ after(grammarAccess.getShallAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Shall__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Shall__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Shall__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShallAccess().getActionAssignment_2()); }
	(rule__Shall__ActionAssignment_2)
	{ after(grammarAccess.getShallAccess().getActionAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Shall__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Shall__Group_1__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Shall__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShallAccess().getGroup_1_0()); }
	(rule__Shall__Group_1_0__0)
	{ after(grammarAccess.getShallAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Shall__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Shall__Group_1_0__0__Impl
	rule__Shall__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Shall__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShallAccess().getBeKeyword_1_0_0()); }
	'be'
	{ after(grammarAccess.getShallAccess().getBeKeyword_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Shall__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Shall__Group_1_0__1__Impl
	rule__Shall__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Shall__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShallAccess().getAbleKeyword_1_0_1()); }
	('able')
	{ after(grammarAccess.getShallAccess().getAbleKeyword_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Shall__Group_1_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Shall__Group_1_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Shall__Group_1_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShallAccess().getToKeyword_1_0_2()); }
	('to')
	{ after(grammarAccess.getShallAccess().getToKeyword_1_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__ModelAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getModelRequirementParserRuleCall_0()); }
		ruleRequirement
		{ after(grammarAccess.getModelAccess().getModelRequirementParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Requirement__PrefixAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRequirementAccess().getPrefixPrefixParserRuleCall_0_0_0()); }
		rulePrefix
		{ after(grammarAccess.getRequirementAccess().getPrefixPrefixParserRuleCall_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Requirement__SystemAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRequirementAccess().getSystemSubjectParserRuleCall_1_0()); }
		ruleSubject
		{ after(grammarAccess.getRequirementAccess().getSystemSubjectParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Requirement__PredicateAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRequirementAccess().getPredicatePredicateParserRuleCall_2_0()); }
		rulePredicate
		{ after(grammarAccess.getRequirementAccess().getPredicatePredicateParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Subject__SystemAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSubjectAccess().getSystemSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getSubjectAccess().getSystemSTRINGTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__EventAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfAccess().getEventSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getIfAccess().getEventSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__EventAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfAccess().getEventSTRINGTerminalRuleCall_2_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getIfAccess().getEventSTRINGTerminalRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__StateAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhileAccess().getStateSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getWhileAccess().getStateSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShallNotAllow__ActionAssignment_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShallNotAllowAccess().getActionSTRINGTerminalRuleCall_3_0_0()); }
		RULE_STRING
		{ after(grammarAccess.getShallNotAllowAccess().getActionSTRINGTerminalRuleCall_3_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShallNotAllow__EntityAssignment_3_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShallNotAllowAccess().getEntitySTRINGTerminalRuleCall_3_1_0_0()); }
		RULE_STRING
		{ after(grammarAccess.getShallNotAllowAccess().getEntitySTRINGTerminalRuleCall_3_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShallNotAllow__ActionPerformedByEntityAssignment_3_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShallNotAllowAccess().getActionPerformedByEntitySTRINGTerminalRuleCall_3_1_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getShallNotAllowAccess().getActionPerformedByEntitySTRINGTerminalRuleCall_3_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShallAllow__ActionAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShallAllowAccess().getActionSTRINGTerminalRuleCall_2_0_0()); }
		RULE_STRING
		{ after(grammarAccess.getShallAllowAccess().getActionSTRINGTerminalRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShallAllow__EntityAssignment_2_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShallAllowAccess().getEntitySTRINGTerminalRuleCall_2_1_0_0()); }
		RULE_STRING
		{ after(grammarAccess.getShallAllowAccess().getEntitySTRINGTerminalRuleCall_2_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShallAllow__ActionPerformedByEntityAssignment_2_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShallAllowAccess().getActionPerformedByEntitySTRINGTerminalRuleCall_2_1_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getShallAllowAccess().getActionPerformedByEntitySTRINGTerminalRuleCall_2_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShallNot__ActionAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShallNotAccess().getActionSTRINGTerminalRuleCall_3_0()); }
		RULE_STRING
		{ after(grammarAccess.getShallNotAccess().getActionSTRINGTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Shall__ActionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShallAccess().getActionSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getShallAccess().getActionSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
